#!/usr/bin/python

import psycopg2

madlib_func_lookup = {'logistic': 'madlib.logregr_train',
                      'glm': 'madlib.glm',
                      'linear': 'madlib.linregr_train',
                      'svm': 'madlib.svm_classification',
                      'lrmf': 'madlib.lmf_igd_run',
                      'crf': ['madlib.crf_train_fgen', 'madlib.lincrf_train']}
madlibtable_name_lookup = {'logistic': '_logregr',
                           'glm': '_glm',
                           'linear': '_linregr',
                           'svm': '_svm',
                           'lrmf': '_lmf_model',
                           'crf': ['dictionary_tbl', 'train_feature_tbl', 'train_featureset_tbl']}
madlibtable_summary_name_lookup = {'logistic': '_logregr_summary',
                                   'glm': '_glm_summary',
                                   'linear': '_linregr_summary',
                                   'svm': '_svm_summary',
                                   'lrmf': '_lmf_summary',
                                   'crf': ''}


class SQLGenerator:
    def __init__(self, config, db):
        self.config = config
        self.bench = config['bench']
        self.tablename = self.gen_tablename()
        self.all_tables = self.get_all_table_names()
        self.dep_varname = self.determine_dep_varname()
        self.feature_varname = 'features'
        self.max_iter = config['epoch']
        self.db = db

    def gen_tablename(self):
        if self.bench == 'lrmf':
            return self.bench + '_' + str(self.config['n_users']) + '_' + str(self.config['n_movies'])
        elif self.bench == 'crf':
            return 'train_segmenttbl'
        else:
            return self.bench + '_' + str(self.config['n_vectors']) + '_' + str(self.config['n_features'])

    def get_all_table_names(self):
        """ output table names generated by madlib
        e.g. madlib.logregr_train() outputs table_logregr and table_logregr_summary tables
        """
        tables = []
        tables.append(self.tablename)
        if self.bench == 'crf':
            tables.append(madlibtable_name_lookup[self.bench])
        else:
            tables.append(self.tablename + madlibtable_name_lookup[self.bench])
            tables.append(self.tablename + madlibtable_summary_name_lookup[self.bench])
        return tables

    def determine_dep_varname(self):
        if self.bench in ['logistic', 'glm', 'linear', 'svm']:
            return 'y'

    def determine_cols(self):
        """ logic for determining each column data type """
        col = 'id SERIAL PRIMARY KEY'
        if self.bench == 'logistic':
            col += ', ' + self.dep_varname + ' INTEGER'
            col += ', ' + self.feature_varname + ' REAL []'
        elif self.bench == 'linear':
            col += ', ' + self.dep_varname + ' REAL'
            col += ', ' + self.feature_varname + ' REAL []'
        elif self.bench == 'glm':
            col += ', ' + self.dep_varname + ' REAL'
            col += ', ' + self.feature_varname + ' REAL []'
        elif self.bench == 'svm':
            col += ', ' + self.dep_varname + ' INTEGER'
            col += ', ' + self.feature_varname + ' REAL []'
        elif self.bench == 'lrmf':
            col += ', row INT, col INT, val REAL'
        elif self.bench == 'crf':
            col += ', start_pos INT, doc_id INT, seg_text TEXT, label INT, max_pos INT'
        return col

    def drop_table(self, tablename):
        return 'DROP TABLE IF EXISTS ' + tablename + ';'

    def create_table(self):
        sql = 'CREATE TABLE ' + self.tablename
        sql += '(' + self.determine_cols() + ');'
        return sql

    def get_max_row_col(self):
        try:
            if self.db == 'postgres':
                conn = psycopg2.connect(dbname='benchmarks',
                                        user='postgres',
                                        host='/tmp/')
            elif self.db == 'greenplum':
                conn = psycopg2.connect(dbname='template1',
                                        user='joon',
                                        host='/tmp/',
                                        password='',
                                        port=15432)
        except psycopg2.Error as e:
            print(e.pgerror)
            print("[EXCEPTION] unable to conenct to database")
            exit()
        cur = conn.cursor()
        cur.execute('select max(row) from ' + self.tablename)
        max_row = cur.fetchall()[0][0]
        cur.execute('select max(col) from ' + self.tablename)
        max_col = cur.fetchall()[0][0]
        return max_row, max_col

    def getrows(self):
        try:
            if self.db == 'postgres':
                conn = psycopg2.connect(dbname='benchmarks',
                                        user='postgres',
                                        host='/tmp/')
            elif self.db == 'greenplum':
                conn = psycopg2.connect(dbname='template1',
                                        user='joon',
                                        host='/tmp/',
                                        password='',
                                        port=15432)
        except psycopg2.Error as e:
            print(e.pgerror)
            print("[EXCEPTION] unable to conenct to database")
            exit()
        cur = conn.cursor()
        cur.execute('select count(*) from ' + self.tablename)
        return cur.fetchone()[0]

    def madlib_func(self):
        #sql = 'EXPLAIN ANALYZE SELECT '
        madlib_func = madlib_func_lookup[self.bench]
        output_table = self.all_tables[1] # e.g. logistic_logregr
        # 1 is needed as a bias term in the indep var array
        indep_varname = 'ARRAY[1]::real[] || ' + self.feature_varname
        sql = 'EXPLAIN ANALYZE SELECT ' + madlib_func

        if self.bench == 'logistic':
            if 'opt' in self.config:
                if self.config['opt'] == 'igd':
                    optimizer = "'igd'"
                elif self.config['opt'] == 'cg':
                    optimizer = "'cg'"
                elif self.config['opt'] == 'irls':
                    optimizer = "'irls'"
            else:
                print('[EXCEPTION] need to specify which optimizer to use!')
                exit()
            tolerance = 0
            sql += "('" + self.tablename + "', '" + output_table \
                   + "', '" + self.dep_varname + "', '" + indep_varname \
                   + "', NULL, " + str(self.max_iter) + ', ' + optimizer + ', ' + str(tolerance) + ");"
        elif self.bench == 'glm':
            sql += "('" + self.tablename + "', '" + output_table \
                   + "', '" + self.dep_varname + "', '" + indep_varname + "', 'family=gaussian, link=identity'" + \
                   ', NULL' + ", 'optimizer=irls, max_iter={:d}');".format(self.max_iter)
        elif self.bench == 'linear':
            args = {'source_table': self.tablename,
                    'out_table': output_table,
                    'dependent_varname': self.dep_varname,
                    'independent_varname': indep_varname}
            sql += '''
            ('{source_table}',
            '{out_table}',
            '{dependent_varname}',
            '{independent_varname}'
            );
            '''.format(**args)

        elif self.bench == 'svm':
            args = {'decay_factor': 0,
                    'max_iter': self.max_iter,
                    'tolerance': 0,
                    'lamb': 0}
            params = '''
            decay_factor = {decay_factor},
            max_iter = {max_iter},
            tolerance = {tolerance},
            lambda = {lamb}
            '''.format(**args)
            args = {'source_table': self.tablename,
                    'model_table': output_table,
                    'dependent_varname': self.dep_varname,
                    'independent_varname': indep_varname,
                    'kernel_func': 'linear',
                    'kernel_params': 'NULL',
                    'grouping_col': 'NULL',
                    'params': params
                    }
            sql += '''
            ('{source_table}',
            '{model_table}',
            '{dependent_varname}',
            '{independent_varname}',
            '{kernel_func}',
            {kernel_params},
            {grouping_col},
            '{params}'
            );
            '''.format(**args)

        elif self.bench == 'lrmf':
            #max_row, max_col = self.get_max_row_col()
            max_row = 28002
            max_col = 45064
            #numrows = self.getrows()
            #epochs = max(max_row, max_col) * (max_row + max_col) / numrows
            epochs = 1
            print '[DEBUG] LRMF epohcs: ' + str(epochs)
            args = {'rel_output': output_table,
                    'rel_source': self.tablename,
                    'col_row': 'row',
                    'col_column': 'col',
                    'col_value': 'val',
                    'row_dim': max_row,
                    'column_dim': max_col,
                    'max_rank': 10,
                    'stepsize': 0.01,
                    'scale_factor': 0.01,
                    'num_iterations': self.max_iter,
                    'tolerance': 0.0}
            sql += '''
            ('{rel_output}',
            '{rel_source}',
            '{col_row}',
            '{col_column}',
            '{col_value}',
            {row_dim},
            {column_dim},
            {max_rank},
            {stepsize},
            {scale_factor},
            {num_iterations},
            {tolerance}
            );
            '''.format(**args)
            # this is so that measurement script can access the epoch value
            self.max_iter = epochs
        return sql

    def gen_tablesize(self):
        sql = "select pg_relation_size('{}');".format(self.tablename)
        return sql


if __name__ == '__main__':
    # cfg_list = [{"bench": "svm",
    #              "n_features": 7129,
    #              "n_vectors": 2,
    #              "filename": "/home/joon/tabla.db/measurements/svm_row",
    #              "epoch": 1}]
    cfg_list = [{"bench": "logistic",
                 "n_features": 6033,
                 "n_vectors": 1,
                 "opt": "irls",
                 "filename": "/home/joon/tabla.db/measurements/logistic_row",
                 "epoch": 1}]

    for cfg in cfg_list:
        sqlgen = SQLGenerator(cfg, 'postgres')
        #print(sqlgen.create_table())
        print(sqlgen.madlib_func())
        print('')
